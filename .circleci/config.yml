version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.8

jobs:
  test-e2e:
    docker:
      - image: cimg/node:20.11.0-browsers
        environment:
          CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
          CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
          TZ: "America/Chicago"
          NODE_ENV: test
          NIGHTWATCH: true
          DEBUG: true
          DISPLAY: :99.0
          NODE_OPTIONS: --max_old_space_size=4096
          TOOL_NODE_FLAGS: --max_old_space_size=4096
          TEST_BROWSER_DRIVER: chrome
          MONGO_URL: mongodb://mongo:27017/meteor_test
      - image: mongo:6.0
        name: mongo
    
    resource_class: large
    
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      
      - checkout
      
      - run:
          name: Create directories
          command: |
            mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      
      - run:
          name: Verify working directory and fix if needed
          command: |
            echo "=== CircleCI Working Directory Check ==="
            echo "Current PWD: $(pwd)"
            echo "HOME: $HOME"
            echo "CIRCLE_WORKING_DIRECTORY: ${CIRCLE_WORKING_DIRECTORY:-not set}"
            
            echo "=== Checking if we're in the right place ==="
            if [ -f ".meteor/release" ]; then
              echo "✓ Found .meteor/release - we're in the right directory"
              cat .meteor/release
            else
              echo "✗ No .meteor/release found in current directory"
              echo "Looking for project directory..."
              find $HOME -name ".meteor" -type d 2>/dev/null | head -5
              
              # If we find the project elsewhere, cd to it
              PROJECT_DIR=$(find $HOME -name ".meteor" -type d 2>/dev/null | head -1 | dirname)
              if [ -n "$PROJECT_DIR" ]; then
                echo "Found project at: $PROJECT_DIR"
                cd "$PROJECT_DIR"
                echo "Changed to: $(pwd)"
                echo "Contents:"
                ls -la
              fi
            fi
      
      - run:
          name: Wait for MongoDB
          command: |
            echo "Waiting for MongoDB to be ready..."
            for i in {1..60}; do
              if nc -z mongo 27017; then
                echo "MongoDB is ready!"
                break
              fi
              echo "Waiting for MongoDB... ($i/60)"
              sleep 5
            done
            
            # Final verification using netcat
            if ! nc -z mongo 27017; then
              echo "ERROR: MongoDB is not responding"
              exit 1
            fi
      
      - run:
          name: Install Meteor
          command: |
            echo "Installing Meteor 3.3.1..."
            curl https://install.meteor.com/?release=3.3.1 | sh
            
            echo "Setting up PATH..."
            echo 'export PATH="$HOME/.meteor:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            sudo ln -sf $HOME/.meteor/meteor /usr/local/bin/meteor
            
            echo "Verifying installation..."
            meteor --version
            meteor list | head -5
      
      - run:
          name: Install dependencies
          command: |
            echo "=== Ensuring we're in the project directory ==="
            cd /home/circleci/project
            pwd
            
            # Verify we're in a Meteor project
            if [ ! -f ".meteor/release" ]; then
              echo "ERROR: Not in a Meteor project directory!"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
            
            echo "✓ Confirmed we're in a Meteor project"
            echo "Meteor version required: $(cat .meteor/release)"
            
            echo "Installing Meteor dependencies..."
            meteor npm install
            
            echo "Installing Nightwatch globally..."
            sudo npm install -g nightwatch@3.0.1
            nightwatch --version
          no_output_timeout: 20m
      
      - run:
          name: Start Meteor
          command: |
            if [ -f "configs/accounts.multiuser.settings.json" ]; then
              meteor run --settings configs/accounts.multiuser.settings.json --port 3000
            else
              meteor run --port 3000
            fi
          background: true
          no_output_timeout: 30m
      
      - run:
          name: Wait for Meteor to start
          command: |
            for i in {1..60}; do
              if curl -f http://localhost:3000 > /dev/null 2>&1; then
                echo "Meteor is ready!"
                break
              fi
              echo "Waiting for Meteor... ($i/60)"
              sleep 10
            done
            
            if ! curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "ERROR: Meteor failed to start"
              exit 1
            fi
      
      - run:
          name: Debug - Check test environment
          command: |
            echo "=== Checking Chrome installation ==="
            CHROME_BIN=$(which google-chrome || which chrome || which chromium-browser || echo "")
            if [ -n "$CHROME_BIN" ]; then
              echo "Chrome found at: $CHROME_BIN"
              $CHROME_BIN --version
              # Create symlink if needed
              if [ ! -f "/usr/bin/google-chrome" ] && [ -f "$CHROME_BIN" ]; then
                sudo ln -sf "$CHROME_BIN" /usr/bin/google-chrome
              fi
            else
              echo "ERROR: Chrome not found!"
              exit 1
            fi
            
            echo "=== Checking ChromeDriver ==="
            CHROMEDRIVER_BIN=$(which chromedriver || echo "")
            if [ -n "$CHROMEDRIVER_BIN" ]; then
              echo "ChromeDriver found at: $CHROMEDRIVER_BIN"
              $CHROMEDRIVER_BIN --version
              # Test if ChromeDriver can start
              timeout 5s $CHROMEDRIVER_BIN --port=9515 --log-level=INFO 2>&1 | head -20 || true
            else
              echo "ERROR: ChromeDriver not found!"
              # Try to find and install it
              echo "Attempting to install ChromeDriver..."
              CHROME_VERSION=$($CHROME_BIN --version | grep -oP '\d+\.\d+\.\d+' | head -1)
              echo "Chrome version: $CHROME_VERSION"
              
              # Download matching ChromeDriver
              CHROME_MAJOR=$(echo $CHROME_VERSION | cut -d. -f1)
              echo "Chrome major version: $CHROME_MAJOR"
              
              # Get the latest ChromeDriver version for this Chrome version
              CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR}")
              echo "ChromeDriver version to install: $CHROMEDRIVER_VERSION"
              
              # Download and install
              wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
              unzip -o chromedriver_linux64.zip
              sudo mv chromedriver /usr/local/bin/
              sudo chmod +x /usr/local/bin/chromedriver
              rm chromedriver_linux64.zip
              
              # Verify installation
              /usr/local/bin/chromedriver --version
            fi
            
            echo "=== Checking test files ==="
            ls -la tests/nightwatch/honeycomb/ || echo "Test directory not found"
            
            echo "=== Checking Nightwatch configs ==="
            ls -la *.conf.js || echo "No config files found"
            
            echo "=== Current working directory ==="
            pwd
            
            echo "=== Node and NPM versions ==="
            node --version
            npm --version
            
            echo "=== Create test output directories ==="
            mkdir -p tests/output/logs tests/screenshots
            chmod -R 777 tests/output tests/screenshots
      
      - run:
          name: Run Nightwatch tests
          command: |
            # Function to output progress periodically
            keep_alive() {
              while true; do
                echo "Tests still running... $(date)"
                sleep 60
              done
            }
            
            # Start keep-alive in background
            keep_alive &
            KEEPALIVE_PID=$!
            
            # Clean up function
            cleanup() {
              echo "Running cleanup..."
              # Kill keep-alive first
              if [ ! -z "$KEEPALIVE_PID" ]; then
                kill $KEEPALIVE_PID 2>/dev/null || true
              fi
              
              # Give ChromeDriver time to shutdown gracefully
              if [ ! -z "$CHROMEDRIVER_PID" ]; then
                kill -TERM $CHROMEDRIVER_PID 2>/dev/null || true
                sleep 1
                # Force kill if still running
                kill -9 $CHROMEDRIVER_PID 2>/dev/null || true
              fi
              
              echo "Cleanup completed"
            }
            # Don't trap EXIT - let the script complete naturally
            # trap cleanup EXIT
            
            # Try to start ChromeDriver manually first
            echo "=== Starting ChromeDriver manually ==="
            CHROMEDRIVER_BIN=$(which chromedriver || echo "/usr/local/bin/chromedriver")
            if [ -f "$CHROMEDRIVER_BIN" ]; then
              echo "Starting ChromeDriver at $CHROMEDRIVER_BIN"
              $CHROMEDRIVER_BIN --port=9515 --log-level=WARNING --log-path=./chromedriver.log --allowed-ips= --whitelisted-ips= &
              CHROMEDRIVER_PID=$!
              sleep 5
              
              # Check if ChromeDriver is running
              if ps -p $CHROMEDRIVER_PID > /dev/null; then
                echo "ChromeDriver started successfully (PID: $CHROMEDRIVER_PID)"
                
                # Test connection
                if curl -s http://localhost:9515/status | grep -q "ready"; then
                  echo "ChromeDriver is ready and responding"
                else
                  echo "WARNING: ChromeDriver started but not responding to status check"
                fi
              else
                echo "ERROR: ChromeDriver failed to start"
                cat ./chromedriver.log || true
              fi
            fi
            
            # Export ChromeDriver path for Nightwatch
            export CHROMEDRIVER_PATH="$CHROMEDRIVER_BIN"
            
            # Run tests with verbose output
            echo "Starting Nightwatch tests with CircleCI configuration..."
            if [ -f "nightwatch.circle.conf.js" ]; then
              echo "Using CircleCI-specific configuration"
              # Create a modified config that doesn't start ChromeDriver
              echo "const config = require('./nightwatch.circle.conf.js');" > nightwatch.circle.manual.conf.js
              echo "config.test_settings.default.webdriver.start_process = false;" >> nightwatch.circle.manual.conf.js
              echo "config.test_settings.default.webdriver.port = 9515;" >> nightwatch.circle.manual.conf.js
              echo "config.test_settings.default.webdriver.default_path_prefix = '';" >> nightwatch.circle.manual.conf.js
              echo "module.exports = config;" >> nightwatch.circle.manual.conf.js
              
              # Run tests and capture exit code
              npx nightwatch --config nightwatch.circle.manual.conf.js
              TEST_EXIT_CODE=$?
            elif [ -f "nightwatch.conf.js" ]; then
              echo "Using default configuration"
              npx nightwatch --config nightwatch.conf.js
              TEST_EXIT_CODE=$?
            else
              echo "ERROR: No Nightwatch config found"
              exit 1
            fi
            
            # Give Nightwatch time to clean up
            echo "Tests completed with exit code: $TEST_EXIT_CODE"
            sleep 2
            
            # Cleanup
            cleanup
            
            # Exit with the test exit code
            exit $TEST_EXIT_CODE
          no_output_timeout: 20m
      
      - run:
          name: Collect artifacts
          command: |
            # Collect test outputs
            if [ -d "tests/output" ]; then
              cp -r tests/output/* $CIRCLE_TEST_REPORTS/ || true
            fi
            if [ -d "tests_output" ]; then
              cp -r tests_output/* $CIRCLE_TEST_REPORTS/ || true
            fi
            
            # Collect screenshots
            if [ -d "tests/screenshots" ]; then
              cp -r tests/screenshots $CIRCLE_ARTIFACTS/ || true
            fi
            if [ -d "screenshots" ]; then
              cp -r screenshots $CIRCLE_ARTIFACTS/ || true
            fi
            find . -name "*.png" -type f -exec cp {} $CIRCLE_ARTIFACTS/ \; || true
            
            # Collect logs
            if [ -d "tests/output/logs" ]; then
              cp -r tests/output/logs $CIRCLE_ARTIFACTS/ || true
            fi
            if [ -f "chromedriver.log" ]; then
              cp chromedriver.log $CIRCLE_ARTIFACTS/ || true
            fi
            
            # Debug: Show what we collected
            echo "=== Artifacts collected ==="
            ls -la $CIRCLE_ARTIFACTS/ || true
            echo "=== Test reports collected ==="
            ls -la $CIRCLE_TEST_REPORTS/ || true
          when: always
      
      - store_test_results:
          path: /tmp/circleci-test-results
      
      - store_artifacts:
          path: /tmp/circleci-artifacts

workflows:
  test-workflow:
    jobs:
      - test-e2e