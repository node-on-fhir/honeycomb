# .circleci/config.yml - CircleCI configuration for Meteor v3 + Nightwatch testing

version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.8

jobs:
  test-e2e:
    docker:
      - image: cimg/node:20.11.0-browsers
        environment:
          CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
          CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
          TZ: "America/Chicago"
          NODE_ENV: test
          NIGHTWATCH: true
          DEBUG: true
          DISPLAY: :99.0
          NODE_OPTIONS: --max_old_space_size=4096
          TOOL_NODE_FLAGS: --max_old_space_size=4096
          TEST_BROWSER_DRIVER: chrome
          MONGO_URL: mongodb://mongo:27017/meteor_test
      - image: mongo:6.0
        name: mongo
    
    resource_class: large
    
    steps:
      - browser-tools/install-chrome
      
      - checkout
      
      - run:
          name: Create directories
          command: |
            mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      
      - run:
          name: Verify working directory and fix if needed
          command: |
            echo "=== CircleCI Working Directory Check ==="
            echo "Current PWD: $(pwd)"
            echo "HOME: $HOME"
            echo "CIRCLE_WORKING_DIRECTORY: ${CIRCLE_WORKING_DIRECTORY:-not set}"
            
            echo "=== Checking if we're in the right place ==="
            if [ -f ".meteor/release" ]; then
              echo "✓ Found .meteor/release - we're in the right directory"
              cat .meteor/release
            else
              echo "✗ No .meteor/release found in current directory"
              echo "Looking for project directory..."
              find $HOME -name ".meteor" -type d 2>/dev/null | head -5
              
              # If we find the project elsewhere, cd to it
              PROJECT_DIR=$(find $HOME -name ".meteor" -type d 2>/dev/null | head -1 | dirname)
              if [ -n "$PROJECT_DIR" ]; then
                echo "Found project at: $PROJECT_DIR"
                cd "$PROJECT_DIR"
                echo "Changed to: $(pwd)"
                echo "Contents:"
                ls -la
              fi
            fi
      
      - run:
          name: Wait for MongoDB
          command: |
            echo "Waiting for MongoDB to be ready..."
            for i in {1..60}; do
              if nc -z mongo 27017; then
                echo "MongoDB is ready!"
                break
              fi
              echo "Waiting for MongoDB... ($i/60)"
              sleep 5
            done
            
            # Final verification using netcat
            if ! nc -z mongo 27017; then
              echo "ERROR: MongoDB is not responding"
              exit 1
            fi
      
      - run:
          name: Install Meteor
          command: |
            echo "Installing Meteor 3.0.2 (project version)..."
            curl https://install.meteor.com/?release=3.0.2 | sh
            
            echo "Setting up Meteor PATH..."
            echo 'export PATH="$HOME/.meteor:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            
            echo "Creating symlink for global access..."
            sudo ln -sf $HOME/.meteor/meteor /usr/local/bin/meteor
            
            echo "Verifying Meteor installation..."
            meteor --version
            
            echo "Checking if Meteor recognizes this as a project..."
            meteor list || echo "Meteor list failed - investigating..."
            
            echo "Manual check - does Meteor see .meteor/release?"
            cat .meteor/release
            ls -la .meteor/
            
            echo "Let's try running meteor status..."
            timeout 30 meteor status || echo "Meteor status timed out or failed"
      
      - run:
          name: Install dependencies
          command: |
            echo "=== Ensuring we're in the project directory ==="
            cd /home/circleci/project
            pwd
            
            # Verify we're in a Meteor project
            if [ ! -f ".meteor/release" ]; then
              echo "ERROR: Not in a Meteor project directory!"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
            
            echo "✓ Confirmed we're in a Meteor project"
            echo "Meteor version required: $(cat .meteor/release)"
            
            echo "Installing Meteor dependencies..."
            meteor npm install
            
            echo "Installing Nightwatch globally..."
            sudo npm install -g nightwatch@3.0.1
            nightwatch --version
          no_output_timeout: 20m
      
      - run:
          name: Start Meteor
          command: |
            if [ -f "configs/settings.nodeonfhir.json" ]; then
              meteor run --settings configs/settings.nodeonfhir.json --port 3000
            else
              meteor run --port 3000
            fi
          background: true
          no_output_timeout: 30m
      
      - run:
          name: Wait for Meteor to start
          command: |
            for i in {1..60}; do
              if curl -f http://localhost:3000 > /dev/null 2>&1; then
                echo "Meteor is ready!"
                break
              fi
              echo "Waiting for Meteor... ($i/60)"
              sleep 10
            done
            
            if ! curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "ERROR: Meteor failed to start"
              exit 1
            fi
      
      - run:
          name: Run Nightwatch tests
          command: |
            if [ -f "nightwatch.conf.js" ]; then
              npx nightwatch --config nightwatch.conf.js
            elif [ -f ".meteor/nightwatch.circle.json" ]; then
              npx nightwatch -c .meteor/nightwatch.circle.json
            else
              echo "No Nightwatch config found"
              exit 1
            fi
          no_output_timeout: 15m
      
      - run:
          name: Collect artifacts
          command: |
            if [ -d "tests_output" ]; then
              cp -r tests_output/* $CIRCLE_TEST_REPORTS/ || true
            fi
            if [ -d "screenshots" ]; then
              cp -r screenshots $CIRCLE_ARTIFACTS/ || true
            fi
            find . -name "*.png" -type f -exec cp {} $CIRCLE_ARTIFACTS/ \; || true
          when: always
      
      - store_test_results:
          path: /tmp/circleci-test-results
      
      - store_artifacts:
          path: /tmp/circleci-artifacts

workflows:
  test-workflow:
    jobs:
      - test-e2e