// packages/hipaa-compliance/client/AuditLogPage.jsx

import React, { useState, useEffect } from 'react';
import { useTracker } from 'meteor/react-meteor-data';
import { Meteor } from 'meteor/meteor';
import { Session } from 'meteor/session';
import { get } from 'lodash';

import { 
  Card,
  CardHeader,
  CardContent,
  Container,
  Grid,
  Typography,
  Button,
  Tabs,
  Tab,
  Box,
  IconButton,
  Tooltip
} from '@mui/material';

import { 
  Refresh as RefreshIcon,
  GetApp as ExportIcon,
  Assessment as ReportIcon,
  Search as SearchIcon
} from '@mui/icons-material';

// Removed dependency on hl7-fhir-data-infrastructure
import { HipaaAuditLog } from '../lib/Collections';
import AuditLogTable from './AuditLogTable';
import AuditLogFilters from './AuditLogFilters';

// Dynamic components from global scope
let DynamicSpacer;

Meteor.startup(function(){
  DynamicSpacer = Meteor.DynamicSpacer;
});

export default function AuditLogPage(props) {
  // State management
  const [selectedTab, setSelectedTab] = useState(0);
  const [filters, setFilters] = useState({
    limit: 100,
    eventType: '',
    userId: '',
    patientId: '',
    collectionName: '',
    startDate: null,
    endDate: null,
    searchText: ''
  });
  const [refreshKey, setRefreshKey] = useState(0);

  // Subscribe to audit log data
  const { auditEvents, isLoading, stats } = useTracker(() => {
    const subscription = Meteor.subscribe('hipaa.auditLog', filters);
    const statsSubscription = Meteor.subscribe('hipaa.auditStatistics');
    
    return {
      auditEvents: HipaaAuditLog.find({}, { 
        sort: { eventDate: -1 } 
      }).fetch(),
      isLoading: !subscription.ready(),
      stats: Session.get('HipaaAuditStatistics')
    };
  }, [filters, refreshKey]);

  // Handle tab change
  const handleTabChange = (event, newValue) => {
    setSelectedTab(newValue);
  };

  // Handle filter changes
  const handleFilterChange = (newFilters) => {
    setFilters({ ...filters, ...newFilters });
  };

  // Handle refresh
  const handleRefresh = () => {
    setRefreshKey(prev => prev + 1);
  };

  // Handle export
  const handleExport = async () => {
    try {
      const exportOptions = {
        format: 'csv',
        dateRange: {
          start: filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
          end: filters.endDate || new Date()
        },
        limit: 1000
      };

      const result = await Meteor.callAsync('hipaa.exportAuditTrail', exportOptions);
      
      // Create download link
      const blob = new Blob([result.data], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `hipaa-audit-log-${new Date().toISOString()}.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Export failed:', error);
      alert('Failed to export audit log: ' + error.message);
    }
  };

  // Handle generate report
  const handleGenerateReport = async () => {
    try {
      const reportFilters = {
        startDate: filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
        endDate: filters.endDate || new Date(),
        eventTypes: filters.eventType ? [filters.eventType] : undefined,
        userId: filters.userId || undefined,
        patientId: filters.patientId || undefined,
        collectionName: filters.collectionName || undefined
      };

      const report = await Meteor.callAsync('hipaa.generateReport', reportFilters);
      
      // Open report in new window
      const reportWindow = window.open('', '_blank');
      reportWindow.document.write(`
        <html>
          <head>
            <title>HIPAA Compliance Report</title>
            <style>
              body { font-family: Arial, sans-serif; padding: 20px; }
              h1 { color: #333; }
              table { border-collapse: collapse; width: 100%; margin: 20px 0; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; }
              .stats { margin: 20px 0; }
              .stat-item { margin: 10px 0; }
            </style>
          </head>
          <body>
            <h1>HIPAA Compliance Report</h1>
            <p>Generated: ${new Date(report.generatedAt).toLocaleString()}</p>
            <p>Generated By: ${report.generatedBy}</p>
            
            <div class="stats">
              <h2>Summary Statistics</h2>
              <div class="stat-item">Total Events: ${report.totalEvents}</div>
              
              <h3>Events by Type</h3>
              <table>
                <tr><th>Event Type</th><th>Count</th></tr>
                ${Object.entries(report.eventsByType).map(([type, count]) => 
                  `<tr><td>${type}</td><td>${count}</td></tr>`
                ).join('')}
              </table>
              
              <h3>Events by User</h3>
              <table>
                <tr><th>User</th><th>Count</th></tr>
                ${Object.entries(report.eventsByUser).map(([user, count]) => 
                  `<tr><td>${user}</td><td>${count}</td></tr>`
                ).join('')}
              </table>
            </div>
          </body>
        </html>
      `);
      reportWindow.document.close();
    } catch (error) {
      console.error('Report generation failed:', error);
      alert('Failed to generate report: ' + error.message);
    }
  };

  // Render loading state
  if (isLoading) {
    return (
      <div id="auditLogPage" style={{ paddingLeft: 20, paddingRight: 20 }}>
        <Container maxWidth="xl">
          <Typography>Loading audit logs...</Typography>
        </Container>
      </div>
    );
  }

  return (
    <div id="auditLogPage" style={{ paddingLeft: 20, paddingRight: 20 }}>
      <Container maxWidth="xl">
        <Card>
          <CardHeader 
            title="HIPAA Audit Log"
            subheader={`${auditEvents.length} events loaded`}
            action={
              <Box>
                <Tooltip title="Refresh">
                  <IconButton onClick={handleRefresh}>
                    <RefreshIcon />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Export CSV">
                  <IconButton onClick={handleExport}>
                    <ExportIcon />
                  </IconButton>
                </Tooltip>
                <Tooltip title="Generate Report">
                  <IconButton onClick={handleGenerateReport}>
                    <ReportIcon />
                  </IconButton>
                </Tooltip>
              </Box>
            }
          />
          <CardContent>
            <Tabs value={selectedTab} onChange={handleTabChange}>
              <Tab label="Audit Events" />
              <Tab label="Filters" />
              <Tab label="Statistics" />
            </Tabs>

            <Box sx={{ mt: 2 }}>
              {selectedTab === 0 && (
                <AuditLogTable 
                  auditEvents={auditEvents}
                  onRowClick={(event) => {
                    console.log('Audit event clicked:', event);
                  }}
                />
              )}
              
              {selectedTab === 1 && (
                <AuditLogFilters
                  filters={filters}
                  onFilterChange={handleFilterChange}
                />
              )}
              
              {selectedTab === 2 && stats && (
                <Box>
                  <Typography variant="h6">Audit Statistics</Typography>
                  <Typography>Total Events: {stats.totalEvents}</Typography>
                  <Typography variant="subtitle1" sx={{ mt: 2 }}>Events by Type:</Typography>
                  {Object.entries(stats.eventTypes || {}).map(([type, count]) => (
                    <Typography key={type} variant="body2">
                      {type}: {count}
                    </Typography>
                  ))}
                </Box>
              )}
            </Box>
          </CardContent>
        </Card>
        
        <DynamicSpacer />
      </Container>
    </div>
  );
}